# app/models/user.rb
# Model user generated by Devise
class User < ActiveRecord::Base
  rolify
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable and :omniauthable

  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable,
         :omniauthable


  HUMANIZED_ATTRIBUTES = {
  :id => "Usuario",
  :email=>"E-mail",
  :password=>"Senha",
  :password_confirmation=>"Confirmação de Senha",
  :remember_me=>"Lembrar-me",
  :current_password=>'Senha Atual',
  :first_name=>'Primeiro Nome',
  :last_name=>'Ultimo Nome',
  :cpf=>"CPF",
  :nickname=>"Nickname"
  }

  #def admin?
   # self.admin == true
  #end

  # validates :terms_of_service, acceptance: true

  usar_como_cpf :cpf

  has_many :authorizations

  def self.human_attribute_name(attr, vazio=nil)
    HUMANIZED_ATTRIBUTES[attr.to_sym] || super
  end
# Generate csv from all atributes of user
  def self.to_csv(options = {})
    CSV.generate(options) do |csv|
      lista = []
      column_names.each { |coluna| lista << self.human_attribute_name(coluna) }
      csv << lista
      all.each { |registro| csv << registro.attributes.values_at(*column_names) }
    end
  end

# Verify if cpf attribute is valid
  def has_valid_cpf?
    self.cpf.valido?
  end

  def need_updated_account?
    self.cpf.nil? or self.nickname.nil? or self.first_name.nil? or self.last_name.nil?
  end

  def self.from_omniauth(access_token)
    data = access_token.info
    user = User.where(:email => data["email"]).first

    unless user
      user = User.create(
          first_name: data["first_name"],
          last_name: data["last_name"],
          email: data["email"],
          password: Devise.friendly_token[0,20],
          provider: data["provider"],
          uid: data["uid"]
        )
    end
    user
  end
end
